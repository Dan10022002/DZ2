#include <iostream>
#include <string>
#include <vector>
#include <ctype.h>
#include <stack>

char Priority_stack(std::stack<char>& sings)
{
    switch (sings.top())
    {
    case '+':
    case '-':
    {
        return 1;
    }
    case '*':
    case '/':
    {
        return 2;
    }
    case '^':
    {
        return 3;
    }
    }
}

char Priority(char& simvol)
{
    switch (simvol)
    {
    case '+':
    case '-':
    {
        return 1;
    }
    case '*':
    case '/':
    {
        return 2;
    }
    case '^':
    {
        return 3;
    }
    }
}

void Function_add(std::string& function, std::vector <char>& exit, std::stack<char>& signs)
{
    if (function == "x")
    {
        std::cout << "Enter the x argument: ";
        char x;
        std::cin >> x;
        exit.push_back(x);
    }
    else if (function == "pi")
    {
        exit.push_back('p');
    }
    else if (function == "e")
    {
        exit.push_back('e');
    }
    else if ((function == "sin") || (function == "tg") || (function == "cos") || (function == "ctg"))
    {

    }
    else if (function == "sqrt")
    {

    }
    else if (function == "exp")
    {
        exit.push_back('e');
        signs.push('^');
    }
    function.clear();
}

void Exit(std::vector <char>& exit, std::stack<char>& signs,std::string& function, char simvol)
{
    if (isdigit(simvol) != 0) 
    {
        exit.push_back(simvol);
    }
    else
    {
        if (isalpha(simvol) != 0)
        {
            function += simvol;
        }
        else
        {
            Function_add(function, exit, signs);
            if (signs.size() == 0)
            {
                signs.push(simvol);
            }
            else if (Priority(simvol) > Priority_stack(signs))
            {
                signs.push(simvol);
            }
            else if (simvol == '(')
            {
                signs.push(simvol);
            }
            else if (signs.top() == '(')
            {
                signs.push(simvol);
            }
            else if (simvol == ')')
            {
                while (signs.top() != '(')
                {
                    exit.push_back(signs.top());
                    signs.pop();
                }
                signs.pop();
            }
            else
            {
                exit.push_back(signs.top());
                signs.pop();
                signs.push(simvol);
            }
        }
    }
}

int main()
{
    
    std::string function;
    std::stack<char> signs;
    std::vector <char> exit;
    std::string expression;
    std::cout << "Enter your expression: ";
    std::getline(std::cin, expression);
    size_t expression_size = expression.length();
    for (char h = 0; h < expression_size; h++)
    {
        char simvol;
        simvol = expression[h];
        Exit(exit, signs, function, simvol);
        if (h == (expression_size - 1))
        {
            for (char h = 0; h < signs.size(); h++)
            {
                Function_add(function, exit, signs);
                exit.push_back(signs.top());
                signs.pop();
            }
        }
    }
    for (char h : exit)
    {
        std::cout << h << " ";
    }
    std::cout << "\n";
    while (signs.size() != 0)
    {
        std::cout << signs.top() << " ";
        signs.pop();
    }
    std::cout << "\n";
    return 0;
}
